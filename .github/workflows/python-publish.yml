name: Release Python Project

# on: [push]
on: 
  # 手动运行
  workflow_dispatch:
  push:
    branches:
      - main

env:
  Name: drinking_remainder

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs: 
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      date: ${{ steps.date.outputs.today }}
    
    steps:
      
      - name: Get current date
        id: date
        # run: echo "::set-output name=today::$(date +'%Y-%m-%d')"
        run: echo "today=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NAME }}-${{ steps.date.outputs.today }}-${{ github.run_id }}
          release_name: ${{ env.NAME }}-${{ steps.date.outputs.today }}-${{ github.run_id }}
          draft: false
          prerelease: false
      
      
  build:
    name: Build environment
    runs-on: ${{ matrix.os }}
    needs: release
    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [windows-latest]
        python-version: ["3.10"]
        # exclude:
        #   - os: macos-latest
        #     python-version: "3.7"
        #   - os: windows-latest
        #     python-version: "3.7"
        # include:
        #   - os: ubuntu-20.04
        #     python-version: 3.x
        #     npm: 6

    steps:
      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: ${{ matrix.python-version }}
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'
      

      - name: get code
        uses: actions/checkout@v3
        # with:
        #   path: dirname

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # pip install -r requirements.txt
          pip install pyinstaller
      
      - name: Build
        run: |
          pyinstaller -F -w -i static/ico/1.ico app.py

      - name: Package
        working-directory: ./dist
        run: |
          pwd
          ls -h
          tar -zcvf ${{ env.NAME }}-${{ matrix.os }}.tar.gz *.exe
          ls -h

      - name: Upload assets
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./dist/${{ env.NAME }}-${{ matrix.os }}-${{ job.release.outputs.date }}.tar.gz
          asset_name: ${{ env.NAME }}-${{ matrix.os }}-${{ job.release.outputs.date }}.tar.gz
          asset_content_type: application/gzip
